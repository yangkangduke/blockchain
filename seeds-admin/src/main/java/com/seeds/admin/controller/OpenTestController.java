package com.seeds.admin.controller;


import com.seeds.admin.dto.game.SkinNftMintSuccessDto;
import com.seeds.admin.service.IAsyncNotifyGameService;
import io.swagger.annotations.Api;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;

/**
 * <p>
 * test 前端控制器
 * </p>
 *
 * @author yk
 * @since 2022-08-19
 */
@RestController
@RequestMapping("/test")
@Api(tags = "test")
@Slf4j
public class OpenTestController {

    @Autowired
    private KafkaTemplate kafkaTemplate;

    @Autowired
    private IAsyncNotifyGameService asyncNotifyGameService;

    /**
     * 发送消息
     *
     * @return
     */
    @GetMapping("/send")
    public Object send() {
        try {
            ListenableFuture<SendResult> listenableFuture = kafkaTemplate.send("test_topic", "发送一个测试消息");
            // 提供回调方法，可以监控消息的成功或失败的后续处理
            listenableFuture.addCallback(new ListenableFutureCallback<SendResult>() {
                @Override
                public void onFailure(Throwable throwable) {
                    log.info("发送消息失败，" + throwable.getMessage());
                }
                @Override
                public void onSuccess(SendResult sendResult) {
                    // 消息发送到的topic
                    String topic = sendResult.getRecordMetadata().topic();
                    // 消息发送到的分区
                    int partition = sendResult.getRecordMetadata().partition();
                    // 消息在分区内的offset
                    long offset = sendResult.getRecordMetadata().offset();
                    log.info(String.format("发送消息成功，topc：%s, partition: %s, offset：%s ", topic, partition, offset));
                }
            });

            return "消息发送成功";
        } catch (Exception e) {
            e.printStackTrace();
            return "消息发送失败";
        }
    }

    /**
     * 监听消息
     *
     * @param content
     */
    @KafkaListener(topics = "test_topic", groupId = "tomge-consumer-group")
    public void receiveMesage(String content) {
        log.info("消费消息：" + content);
    }

    @PostMapping("skin-mint-success")
    private void notifyGame() {
        ArrayList<SkinNftMintSuccessDto> dtos = new ArrayList<>();

        SkinNftMintSuccessDto skin1 = new SkinNftMintSuccessDto();
        skin1.setAutoId(10001000000002L);
        skin1.setTokenAddress("skin11002");
        skin1.setConfigId(2L);
        skin1.setRarity("normal");

        SkinNftMintSuccessDto skin2 = new SkinNftMintSuccessDto();
        skin2.setAutoId(10001000000002L);
        skin2.setTokenAddress("skin11002");
        skin2.setConfigId(2L);
        skin2.setRarity("rare");

        SkinNftMintSuccessDto skin3 = new SkinNftMintSuccessDto();
        skin3.setAutoId(10001000000003L);
        skin3.setTokenAddress("skin11003");
        skin3.setConfigId(3L);
        skin3.setRarity("epic");

        dtos.add(skin1);
        dtos.add(skin2);
        dtos.add(skin3);

        asyncNotifyGameService.skinMintSuccess(dtos);
    }
}
